{"version":3,"file":"main.a7d1f560199c74ccebeb.hot-update.js","sources":["webpack:///./src/widgets/Menu/components/UserMenu/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { usePopper } from \"react-popper\";\nimport styled from \"styled-components\";\nimport Flex from \"../../../../components/Box/Flex\";\nimport { ChevronDownIcon } from \"../../../../components/Svg\";\nimport isTouchDevice from \"../../../../util/isTouchDevice\";\nimport { UserMenuProps, variants } from \"./types\";\nimport MenuIcon from \"./MenuIcon\";\nimport { UserMenuItem } from \"./styles\";\n\nconst StyledUserMenu = styled(Flex)`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.tertiary};\n  border-radius: 16px;\n  box-shadow: inset 0px -2px 0px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  display: inline-flex;\n  height: 32px;\n  padding-left: 40px;\n  padding-right: 8px;\n  position: relative;\n\n  &:hover {\n    opacity: 0.65;\n  }\n`;\n\nconst LabelText = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  font-weight: 600;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n    margin-left: 8px;\n    margin-right: 4px;\n  }\n`;\n\nconst Menu = styled.div<{ isOpen: boolean }>`\n  background-color: ${({ theme }) => theme.card.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 16px;\n  padding-bottom: 4px;\n  padding-top: 4px;\n  pointer-events: auto;\n  width: 280px;\n  visibility: visible;\n  z-index: 1001;\n\n  ${({ isOpen }) =>\n    !isOpen &&\n    `\n    pointer-events: none;\n    visibility: hidden;\n  `}\n\n  ${UserMenuItem}:first-child {\n    border-radius: 8px 8px 0 0;\n  }\n\n  ${UserMenuItem}:last-child {\n    border-radius: 0 0 8px 8px;\n  }\n`;\n\nconst UserMenu: React.FC<UserMenuProps> = ({\n  account,\n  text,\n  avatarSrc,\n  variant = variants.DEFAULT,\n  children,\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [targetRef, setTargetRef] = useState<HTMLDivElement | null>(null);\n  const [tooltipRef, setTooltipRef] = useState<HTMLDivElement | null>(null);\n  const hideTimeout = useRef<number>();\n  const isHoveringOverTooltip = useRef(false);\n  const accountEllipsis = account ? `${account.substring(0, 2)}...${account.substring(account.length - 4)}` : null;\n  const { styles, attributes } = usePopper(targetRef, tooltipRef, {\n    placement: \"bottom-end\",\n    modifiers: [{ name: \"offset\", options: { offset: [0, 12] } }],\n  });\n\n  /**\n   * See \"useTooltip\"\n   */\n  useEffect(() => {\n    const showTooltip = (evt: MouseEvent | TouchEvent) => {\n      setIsOpen(true);\n\n      if (evt.target === targetRef) {\n        clearTimeout(hideTimeout.current);\n      }\n\n      if (evt.target === tooltipRef) {\n        isHoveringOverTooltip.current = true;\n      }\n    };\n\n    const hideTooltip = (evt: MouseEvent | TouchEvent) => {\n      if (hideTimeout.current) {\n        window.clearTimeout(hideTimeout.current);\n      }\n\n      if (evt.target === tooltipRef) {\n        isHoveringOverTooltip.current = false;\n      }\n\n      if (!isHoveringOverTooltip.current) {\n        hideTimeout.current = window.setTimeout(() => {\n          if (!isHoveringOverTooltip.current) {\n            setIsOpen(false);\n          }\n        }, 150);\n      }\n    };\n\n    const toggleTouch = (evt: TouchEvent) => {\n      const target = evt.target as Node;\n      const isTouchingTargetRef = target && targetRef?.contains(target);\n      const isTouchingTooltipRef = target && tooltipRef?.contains(target);\n\n      if (isTouchingTargetRef) {\n        setIsOpen((prevOpen) => !prevOpen);\n      } else if (isTouchingTooltipRef) {\n        // Don't close the menu immediately so it catches the event\n        setTimeout(() => {\n          setIsOpen(false);\n        }, 100);\n      } else {\n        setIsOpen(false);\n      }\n    };\n\n    if (isTouchDevice()) {\n      document.addEventListener(\"touchstart\", toggleTouch);\n    } else {\n      targetRef?.addEventListener(\"mouseenter\", showTooltip);\n      targetRef?.addEventListener(\"mouseleave\", hideTooltip);\n      tooltipRef?.addEventListener(\"mouseenter\", showTooltip);\n      tooltipRef?.addEventListener(\"mouseleave\", hideTooltip);\n    }\n\n    return () => {\n      if (isTouchDevice()) {\n        document.removeEventListener(\"touchstart\", toggleTouch);\n      } else {\n        targetRef?.removeEventListener(\"mouseenter\", showTooltip);\n        targetRef?.removeEventListener(\"mouseleave\", hideTooltip);\n        tooltipRef?.removeEventListener(\"mouseenter\", showTooltip);\n        tooltipRef?.removeEventListener(\"mouseleave\", hideTooltip);\n      }\n    };\n  }, [targetRef, tooltipRef, hideTimeout, isHoveringOverTooltip, setIsOpen]);\n\n  return (\n    <>\n      <StyledUserMenu ref={setTargetRef} {...props}>\n        <MenuIcon avatarSrc={avatarSrc} variant={variant} />\n        <LabelText title={text || account}>{text || accountEllipsis}</LabelText>\n      </StyledUserMenu>\n      <Menu style={styles.popper} ref={setTooltipRef} {...attributes.popper} isOpen={isOpen}>\n        {children}\n      </Menu>\n    </>\n  );\n};\n\nexport default UserMenu;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AAeA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}